#!/usr/bin/env python3
import argparse
import sys

import lib.dev
import lib.prod
import lib.version
import lib.validate_config
import lib.generate
import tasks

VERSION = '0.1.0'
CONFIG_FILE = 'config/config.py'


def main():
    parser = argparse.ArgumentParser(description='Run your CTF challenges in production easily')
    parser.add_argument('mode',
                        choices=['dev', 'prod', 'generate'],
                        help='Specify whether to run in dev or prod.',
                        default='dev')
    parser.add_argument('generatable',
                        choices=['configfile', 'main'],
                        nargs='?',
                        help='when mode is `generate`, specify what to generate.')
    parser.add_argument('--task')
    parser.add_argument('--version', action='version', version='%(prog)s ' + lib.version.VERSION)
    parser.add_argument('--port', default="default")
    args = parser.parse_args()
    if args.mode == 'generate':
        lib.generate.generate(parser, args)
        return

    runnable = lib.prod.run_prod if args.mode == 'prod' else lib.dev.run_dev
    try:
        from config import config
    except Exception as e:
        print('Could not load configuration file.')
        print('Check if you have defined a configuration file in config/config.py.')
        print(f'Underlying exception: {e}')
        return

    if args.port == 'random':
        config.CTFNC_PORT = 0
    elif args.port != 'default':
        config.CTFNC_PORT = int(args.port)

    validated_config: lib.validate_config.Config = None
    try:
        validated_config = lib.validate_config.validate_config(config)
    except Exception as e:
        print('Could not validate configuration file: some things may be missing.')
        print(f'You can try generating a new one by using {sys.argv[0]} generate configfile')
        print(f'Underlying exception: {e}')
        return

    try:
        task = tasks.get_task(args.task)
        runnable(validated_config, task)
    except Exception as e:
        print(type(e))
        print('Could not load main function. Check if you have defined a main function in \'src/main.py\'')
        print(f'Underlying exception: {e}')
        return


if __name__ == '__main__':
    main()